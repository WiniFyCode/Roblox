--// Zombie + Chest ESP + Hitbox + Teleport Collector
-- Load Fluent UI (working library)
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Zombie Hyperloot",
    SubTitle = "by TNG",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightShift
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local entityFolder = Workspace:WaitForChild("Entity")
local fxFolder = Workspace:WaitForChild("FX")
local mapModel = Workspace:WaitForChild("Map")

-- C·∫•u h√¨nh
local hitboxSize = Vector3.new(4, 4, 4)
local espColorZombie = Color3.fromRGB(0, 255, 0)
local espColorChest = Color3.fromRGB(255, 255, 0)
local refreshRate = 1
local teleportKey = Enum.KeyCode.T -- ·∫•n T ƒë·ªÉ teleport t·ªõi to√†n b·ªô v·∫≠t ph·∫©m r∆°i

-- Toggle states
local espZombieEnabled = true
local espChestEnabled = false
local hitboxEnabled = true
local teleportEnabled = true
local cameraTeleportEnabled = true
local teleportToLastZombie = false -- Teleport t·ªõi zombie cu·ªëi c√πng hay kh√¥ng
local cameraTeleportKey = Enum.KeyCode.X -- ·∫•n X ƒë·ªÉ tele camera t·ªõi zombie
local cameraTeleportActive = false -- Bi·∫øn ki·ªÉm tra ƒëang ch·∫°y camera teleport loop
local cameraTeleportStartPosition = nil -- V·ªã tr√≠ ban ƒë·∫ßu c·ªßa nh√¢n v·∫≠t
local cameraOffsetX = 0 -- Camera offset X
local cameraOffsetY = 10 -- Camera offset Y
local cameraOffsetZ = -10 -- Camera offset Z

-- Auto Move Configuration
local autoMoveEnabled = false -- T·ª± ƒë·ªông duy tr√¨ kho·∫£ng c√°ch v·ªõi zombie
local autoMoveDistance = 100 -- Kho·∫£ng c√°ch c·∫ßn duy tr√¨ v·ªõi zombie (studs)
local autoMoveSpeed = 20 -- T·ªëc ƒë·ªô di chuy·ªÉn (studs/second)
local autoMoveKey = Enum.KeyCode.M -- ·∫•n M ƒë·ªÉ b·∫≠t/t·∫Øt auto move
local isAutoMoving = false -- Tr·∫°ng th√°i ƒëang auto move
local autoMoveTarget = nil -- Zombie ƒëang theo d√µi
local lastTargetZombie = nil -- Zombie ƒë∆∞·ª£c theo d√µi l·∫ßn tr∆∞·ªõc


----------------------------------------------------------
-- üîπ Auto Move Functions - Duy tr√¨ kho·∫£ng c√°ch c·ªë ƒë·ªãnh v·ªõi zombie
-- Ki·ªÉm tra v·∫≠t c·∫£n tr√™n ƒë∆∞·ªùng ƒëi
local function checkObstacle(startPos, endPos)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {localPlayer.Character}
	
	local direction = (endPos - startPos)
	local raycastResult = Workspace:Raycast(startPos, direction)
	
	if raycastResult then
		local distance = (raycastResult.Position - startPos).Magnitude
		local totalDistance = direction.Magnitude
		
		-- N·∫øu v·∫≠t c·∫£n ·ªü g·∫ßn (trong 80% ƒë∆∞·ªùng ƒëi)
		if distance < totalDistance * 0.8 then
			return true, raycastResult.Position
		end
	end
	
	return false, nil
end

-- T√¨m zombie g·∫ßn nh·∫•t ƒë·ªÉ theo d√µi
local function findNearestZombieToPlayer()
	local char = localPlayer.Character
	local hrp = char and char:FindFirstChild("HumanoidRootPart")
	if not hrp then return nil end
	
	local playerPosition = hrp.Position
	local nearestZombie = nil
	local nearestDistance = math.huge
	
	for _, zombie in ipairs(entityFolder:GetChildren()) do
		if zombie:IsA("Model") then
			local humanoid = zombie:FindFirstChild("Humanoid")
			local zombieHRP = zombie:FindFirstChild("HumanoidRootPart")
			
			if humanoid and humanoid.Health > 0 and zombieHRP then
				local distance = (playerPosition - zombieHRP.Position).Magnitude
				if distance < nearestDistance then
					nearestDistance = distance
					nearestZombie = {zombie = zombie, distance = distance, position = zombieHRP.Position}
				end
			end
		end
	end
	
	return nearestZombie
end

-- H√†m duy tr√¨ kho·∫£ng c√°ch c·ªë ƒë·ªãnh v·ªõi zombie g·∫ßn nh·∫•t
local function maintainDistanceFromZombie()
	local char = localPlayer.Character
	local hrp = char and char:FindFirstChild("HumanoidRootPart")
	local humanoid = char and char:FindFirstChild("Humanoid")
	
	if not hrp or not humanoid then 
		return 
	end
	
	local playerPosition = hrp.Position
	local targetDistance = tonumber(autoMoveDistance) or 100
	
	-- T√¨m zombie g·∫ßn nh·∫•t
	local nearestZombie = findNearestZombieToPlayer()
	if not nearestZombie then 
		lastTargetZombie = nil
		return 
	end
	
	-- Ki·ªÉm tra xem c√≥ ph·∫£i zombie m·ªõi kh√¥ng
	if lastTargetZombie ~= nearestZombie.zombie then
		lastTargetZombie = nearestZombie.zombie
	end
	
	local zombiePosition = nearestZombie.position
	local currentDistance = nearestZombie.distance
	
	-- T√≠nh to√°n v·ªã tr√≠ c·∫ßn di chuy·ªÉn t·ªõi ƒë·ªÉ duy tr√¨ kho·∫£ng c√°ch 100 studs
	local direction = (playerPosition - zombiePosition).Unit
	local targetPosition = zombiePosition + (direction * targetDistance)
	
	-- Ki·ªÉm tra v·∫≠t c·∫£n
	local hasObstacle, obstaclePos = checkObstacle(playerPosition, targetPosition)
	if hasObstacle then
		
		-- T√¨m ƒë∆∞·ªùng ƒëi thay th·∫ø (di chuy·ªÉn sang tr√°i/ph·∫£i)
		local sideDirections = {
			Vector3.new(1, 0, 0),   -- Ph·∫£i
			Vector3.new(-1, 0, 0),  -- Tr√°i
			Vector3.new(0, 0, 1),   -- Tr∆∞·ªõc
			Vector3.new(0, 0, -1)   -- Sau
		}
		
		local bestPosition = nil
		for _, sideDir in ipairs(sideDirections) do
			local testPos = zombiePosition + (sideDir * targetDistance)
			local testDir = (testPos - playerPosition).Unit
			local finalPos = playerPosition + (testDir * targetDistance)
			
			local hasTestObstacle = checkObstacle(playerPosition, finalPos)
			if not hasTestObstacle then
				bestPosition = finalPos
				break
			end
		end
		
		if bestPosition then
			targetPosition = bestPosition
		else
			return
		end
	end
	
	-- Di chuy·ªÉn t·ªõi v·ªã tr√≠ m·ª•c ti√™u ƒë·ªÉ duy tr√¨ kho·∫£ng c√°ch 100 studs
	humanoid:MoveTo(targetPosition)
end

-- Auto Move Loop - Duy tr√¨ kho·∫£ng c√°ch 100 studs v·ªõi zombie g·∫ßn nh·∫•t
task.spawn(function()
	while task.wait(0.2) do -- Ki·ªÉm tra th∆∞·ªùng xuy√™n ƒë·ªÉ theo d√µi zombie g·∫ßn nh·∫•t
		if autoMoveEnabled then
			local nearestZombie = findNearestZombieToPlayer()
			
			if nearestZombie then
				local currentDistance = tonumber(nearestZombie.distance) or 0
				local targetDistance = tonumber(autoMoveDistance) or 100
				local distanceDiff = math.abs(currentDistance - targetDistance)
				
				-- Ch·ªâ di chuy·ªÉn n·∫øu kho·∫£ng c√°ch sai l·ªách > 10 studs (cho kho·∫£ng c√°ch 100)
				if distanceDiff > 10 then
					maintainDistanceFromZombie()
					task.wait(0.1) -- ƒê·ª£i ng·∫Øn h∆°n ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n
				end
			end
		end
	end
end)

----------------------------------------------------------
-- üîπ H√†m t·∫°o ESP Billboard
local function createESP(part, color, name, zombie)
	if not part or part:FindFirstChild("ESPTag") then return end

	local billboard = Instance.new("BillboardGui")
	billboard.Name = "ESPTag"
	billboard.AlwaysOnTop = true
	billboard.Size = UDim2.new(0, 200, 0, 30) -- Ch·ªâ c·∫ßn k√≠ch th∆∞·ªõc cho m√°u
	billboard.StudsOffset = Vector3.new(0, 2, 0)
	billboard.Parent = part

	-- Kh√¥ng t·∫°o label t√™n n·ªØa, ch·ªâ hi·ªÉn th·ªã m√°u
	
	-- Th√™m hi·ªÉn th·ªã m√°u cho zombie
	if zombie and zombie:FindFirstChild("Humanoid") then
		local humanoid = zombie.Humanoid
		local healthText = string.format("[%d/%d]", math.floor(humanoid.Health), math.floor(humanoid.MaxHealth))
		
		local healthLabel = Instance.new("TextLabel")
		healthLabel.Size = UDim2.new(1, 0, 0, 20)
		healthLabel.Position = UDim2.new(0, 0, 0, 0) -- ƒê·∫∑t ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n
		healthLabel.BackgroundTransparency = 1
		healthLabel.Text = healthText
		healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- M√†u tr·∫Øng n·ªïi b·∫≠t
		healthLabel.TextStrokeTransparency = 0
		healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Vi·ªÅn ƒëen ƒë·ªÉ n·ªïi b·∫≠t
		healthLabel.Font = Enum.Font.SourceSansBold
		healthLabel.TextSize = 16 -- TƒÉng k√≠ch th∆∞·ªõc ch·ªØ
		healthLabel.Parent = billboard
		
		-- C·∫≠p nh·∫≠t m√°u theo th·ªùi gian th·ª±c
		task.spawn(function()
			while part and part.Parent and billboard and billboard.Parent do
				if humanoid and humanoid.Parent then
					local currentHealth = math.floor(humanoid.Health)
					local maxHealth = math.floor(humanoid.MaxHealth)
					healthText = string.format("[%d/%d]", currentHealth, maxHealth)
					healthLabel.Text = healthText
					
					-- ƒê·ªïi m√†u theo m·ª©c m√°u v·ªõi m√†u n·ªïi b·∫≠t
					if currentHealth <= maxHealth * 0.25 then
						healthLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- ƒê·ªè ƒë·∫≠m khi √≠t m√°u
						healthLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255) -- Vi·ªÅn tr·∫Øng
					elseif currentHealth <= maxHealth * 0.5 then
						healthLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- V√†ng khi m√°u trung b√¨nh
						healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Vi·ªÅn ƒëen
					else
						healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0) -- Xanh l√° khi nhi·ªÅu m√°u
						healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0) -- Vi·ªÅn ƒëen
					end
				else
					break
				end
				task.wait(0.1) -- C·∫≠p nh·∫≠t m·ªói 0.1 gi√¢y
			end
		end)
	end
end

----------------------------------------------------------
-- üîπ M·ªü r·ªông hitbox cho zombie (ch·ªâ l√†m 1 l·∫ßn)
local processedZombies = {} -- L∆∞u zombie ƒë√£ x·ª≠ l√Ω

local function expandHitbox(zombie)
	-- Ki·ªÉm tra xem zombie ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
	if processedZombies[zombie] then return end
	
	-- ƒê·ª£i model load xong c√°c b·ªô ph·∫≠n ch√≠nh
	local head = zombie:WaitForChild("Head", 4)
	if not head then return end
	
	if head:IsA("BasePart") then
		-- L∆∞u size g·ªëc
		if not head:GetAttribute("OriginalSize") then
			head:SetAttribute("OriginalSizeX", head.Size.X)
			head:SetAttribute("OriginalSizeY", head.Size.Y)
			head:SetAttribute("OriginalSizeZ", head.Size.Z)
		end
		
		-- Ch·ªâ set hitbox n·∫øu ƒëang b·∫≠t
		if hitboxEnabled then
			head.Size = hitboxSize
			head.Transparency = 0.5
			head.Color = Color3.fromRGB(255, 0, 0)
			head.CanCollide = false
		end
		
		-- ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
		processedZombies[zombie] = true
	end
end

-- H√†m kh√¥i ph·ª•c hitbox v·ªÅ b√¨nh th∆∞·ªùng
local function restoreHitbox(zombie)
	local head = zombie:FindFirstChild("Head")
	if head and head:IsA("BasePart") then
		-- Kh√¥i ph·ª•c size g·ªëc
		local origX = head:GetAttribute("OriginalSizeX")
		local origY = head:GetAttribute("OriginalSizeY")
		local origZ = head:GetAttribute("OriginalSizeZ")
		
		if origX and origY and origZ then
			head.Size = Vector3.new(origX, origY, origZ)
			head.Transparency = 1
			head.CanCollide = true
		end
	end
end

----------------------------------------------------------
-- üîπ ESP cho zombie m·ªõi sinh ra (ƒë·ª£i load h·∫øt)
entityFolder.ChildAdded:Connect(function(zombie)
	if zombie:IsA("Model") then
		-- ƒê·ª£i zombie load ƒë·ªß c√°c b·ªô ph·∫≠n
		local head = zombie:WaitForChild("Head", 3)
		if head then
			task.wait(0.5) -- ƒê·ª£i th√™m m·ªôt ch√∫t ƒë·ªÉ model load xong ho√†n to√†n
			if espZombieEnabled then
				createESP(head, espColorZombie, zombie.Name, zombie)
			end
			if hitboxEnabled then
				expandHitbox(zombie)
			end
		end
	end
end)

----------------------------------------------------------
-- üîπ ESP cho chest (ch√≠nh x√°c ƒë∆∞·ªùng d·∫´n: Map.Model.Chest.Model.Chest)
local function setupChestESP()
	local map = Workspace:FindFirstChild("Map")
	if not map then return end
	
	local mapModel = map:FindFirstChild("Model")
	if not mapModel then return end
	
	local chest = mapModel:FindFirstChild("Chest")
	if not chest then return end
	
	local chestModel = chest:FindFirstChild("Model")
	if not chestModel then return end
	
	-- ESP cho t·∫•t c·∫£ chest trong Model
	for _, chestObj in ipairs(chestModel:GetChildren()) do
		if chestObj:IsA("Model") then
			local chestPart = chestObj:FindFirstChild("Chest")
			if chestPart and chestPart:IsA("BasePart") then
				createESP(chestPart, espColorChest, "Chest", nil)
			end
		end
	end
end

----------------------------------------------------------
-- üîπ T·ª± ƒë·ªông l√†m m·ªõi ESP m·ªói v√†i gi√¢y
task.spawn(function()
	while task.wait(refreshRate) do
		for _, zombie in ipairs(entityFolder:GetChildren()) do
			if zombie:IsA("Model") and zombie:FindFirstChild("Head") then
				local head = zombie:FindFirstChild("Head")
				if head then
					if espZombieEnabled then
						createESP(head, espColorZombie, zombie.Name, zombie)
					end
					-- Kh√¥ng g·ªçi expandHitbox ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ x·ª≠ l√Ω trong ChildAdded
				end
			end
		end
		if espChestEnabled then
			setupChestESP()
		end
	end
end)

----------------------------------------------------------
-- üîπ Auto Teleport to Chests and Items (Press T)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == teleportKey and teleportEnabled then
		local char = localPlayer.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local oldPos = hrp.Position
		local virtualUser = game:GetService("VirtualUser")
		
		-- B∆∞·ªõc 1: T√¨m t·∫•t c·∫£ chest (t·∫•t c·∫£ lo·∫°i chest: Common, Rare, Epic, Legendary...)
		local chests = {}
		local map = Workspace:FindFirstChild("Map")
		if map then
			-- Duy·ªát qua t·∫•t c·∫£ children c·ªßa Map
			for _, child in ipairs(map:GetChildren()) do
				if child:FindFirstChild("Chest") then
					local chestFolder = child.Chest
					
					-- Duy·ªát qua T·∫§T C·∫¢ children (Model, Model1, Model2, Model3...)
					for _, chestModel in ipairs(chestFolder:GetChildren()) do
						if chestModel:IsA("Model") and chestModel:FindFirstChild("Chest") then
							local chestModelFolder = chestModel.Chest
							
							-- T√¨m t·∫•t c·∫£ chest types (Common, Rare, Epic, Legendary...)
							for _, chestModelChild in ipairs(chestModelFolder:GetChildren()) do
								if chestModelChild:IsA("Model") then
									-- L·∫•y BasePart ƒë·∫ßu ti√™n b√™n trong chest Model
									local chestPart = chestModelChild:FindFirstChildWhichIsA("BasePart")
									if chestPart then
										table.insert(chests, chestPart)
									end
								end
							end
						end
					end
				end
			end
		end
		
		-- B∆∞·ªõc 2: Teleport t·ªõi t·ª´ng chest v√† m·ªü
		for _, chestPart in ipairs(chests) do
			-- Teleport t·ªõi chest
			hrp.CFrame = CFrame.new(chestPart.Position + Vector3.new(0, 2, 0))
			task.wait(0.3)
			
			-- T·ª± ƒë·ªông nh·∫•n E ƒë·ªÉ interact v·ªõi chest
			virtualUser:CaptureController()
			virtualUser:ClickButton1(Vector2.new(0, 0))
			task.wait(0.1)
			
			-- Gi·∫£ l·∫≠p nh·∫•n ph√≠m E
			game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
			task.wait(0.1)
			game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.E, false, game)
			task.wait(0.2)
		end
	
		
		-- B∆∞·ªõc 3: Teleport t·ªõi t·∫•t c·∫£ items
		local items = {}
		for _, fx in ipairs(fxFolder:GetChildren()) do
			local part = fx:FindFirstChildWhichIsA("BasePart")
			if part then
				table.insert(items, part)
			end
		end
		
		for _, part in ipairs(items) do
			if part and part:IsDescendantOf(fxFolder) then
				hrp.CFrame = CFrame.new(part.Position + Vector3.new(0, 2, 0))
				task.wait(0.15)
			end
		end
		
		-- Quay v·ªÅ v·ªã tr√≠ c≈©
		hrp.CFrame = CFrame.new(oldPos)
	end
end)



----------------------------------------------------------
-- üîπ Auto Move Keybind (Press M)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == autoMoveKey then
		autoMoveEnabled = not autoMoveEnabled
		print("Auto Move:", autoMoveEnabled and "ON" or "OFF")
	end
end)

----------------------------------------------------------
-- üîπ Camera Teleport to Nearest Zombie (Auto loop)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == cameraTeleportKey and cameraTeleportEnabled then
		-- N·∫øu ƒëang ch·∫°y th√¨ h·ªßy
		if cameraTeleportActive then
			cameraTeleportActive = false
			
			-- Teleport v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
			local char = localPlayer.Character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			if hrp and cameraTeleportStartPosition then
				hrp.Anchored = false
				hrp.CFrame = CFrame.new(cameraTeleportStartPosition)
			elseif hrp then
				hrp.Anchored = false
			end
			
			-- Reset camera
			local camera = Workspace.CurrentCamera
			camera.CameraSubject = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
			return
		end
		
		-- L∆∞u v·ªã tr√≠ ban ƒë·∫ßu c·ªßa nh√¢n v·∫≠t
		local char = localPlayer.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if hrp then
			cameraTeleportStartPosition = hrp.Position
		end
		
		-- B·∫Øt ƒë·∫ßu camera teleport
		cameraTeleportActive = true
		
		-- T√¨m zombie c√≤n s·ªëng m√°u √≠t nh·∫•t t·ª´ v·ªã tr√≠ ng∆∞·ªùi ch∆°i
        -- T√¨m zombie c√≤n s·ªëng c√≥ MaxHealth nh·ªè nh·∫•t. N·∫øu hi·ªán t·∫°i ƒë√£ tele v√†o 1 zombie m√† c√≥ zombie m·ªõi MaxHealth th·∫•p h∆°n, chuy·ªÉn sang tele t·ªõi con ƒë√≥.
        local function findLowestMaxHealthZombie(currentZombie)
            local char = localPlayer.Character
            local playerHRP = char and char:FindFirstChild("HumanoidRootPart")
            if not playerHRP then return nil end
            local playerPosition = playerHRP.Position
            local lowestMaxHealth = math.huge
            local nearestDistance = math.huge
            local result = nil
            for _, zombie in ipairs(entityFolder:GetChildren()) do
                if zombie:IsA("Model") then
                    local humanoid = zombie:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local head = zombie:FindFirstChild("Head")
                        local hrp = zombie:FindFirstChild("HumanoidRootPart")
                        local targetPart = head or hrp
                        if targetPart and targetPart:IsA("BasePart") then
                            local maxHealth = humanoid.MaxHealth
                            local distance = (playerPosition - targetPart.Position).Magnitude
                            if maxHealth < lowestMaxHealth or (maxHealth == lowestMaxHealth and distance < nearestDistance) then
                                lowestMaxHealth = maxHealth
                                nearestDistance = distance
                                result = {part = targetPart, zombie = zombie, maxHealth = maxHealth}
                            end
                        end
                    end
                end
            end
            -- N·∫øu truy·ªÅn v√†o zombie hi·ªán t·∫°i m√† v·∫´n l√† con n√†y/l√† nil th√¨ tr·∫£ v·ªÅ nil, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ zombie m·ªõi
            if currentZombie == nil or (result and result.zombie ~= currentZombie) then
                return result
            end
            return nil
        end
        
        -- T√¨m zombie m√°u hi·ªán t·∫°i th·∫•p nh·∫•t (∆∞u ti√™n g·∫ßn n·∫øu tr√πng m√°u)
        local function findLowestHealthZombie()
            local char = localPlayer.Character
            local playerHRP = char and char:FindFirstChild("HumanoidRootPart")
            if not playerHRP then return nil end
        
            local playerPosition = playerHRP.Position
            local lowestZombie = nil
            local lowestHealth = math.huge
            local nearestDistance = math.huge
        
            for _, zombie in ipairs(entityFolder:GetChildren()) do
                if zombie:IsA("Model") then
                    local humanoid = zombie:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then -- ch·ªâ l·∫•y zombie c√≤n s·ªëng
                        local head = zombie:FindFirstChild("Head")
                        local hrp = zombie:FindFirstChild("HumanoidRootPart")
                        local targetPart = head or hrp
                        if targetPart and targetPart:IsA("BasePart") then
                            local currentHealth = humanoid.Health
                            local distance = (playerPosition - targetPart.Position).Magnitude
                            -- ∆Øu ti√™n m√°u th·∫•p nh·∫•t, n·∫øu tr√πng m√°u th√¨ l·∫•y con g·∫ßn nh·∫•t
                            if currentHealth < lowestHealth or (currentHealth == lowestHealth and distance < nearestDistance) then
                                lowestHealth = currentHealth
                                nearestDistance = distance
                                lowestZombie = {part = targetPart, zombie = zombie}
                            end
                        end
                    end
                end
            end
            return lowestZombie
        end
        
        -- Loop teleport t·ªõi zombie m√°u th·∫•p nh·∫•t ho·∫∑c zombie MaxHealth th·∫•p h∆°n
        task.spawn(function()
            local camera = Workspace.CurrentCamera
            local char = localPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            local lastZombiePosition = nil
            local currentTarget = nil
            while cameraTeleportActive do
                local newTarget = nil
                -- N·∫øu ƒë√£ c√≥ target, lu√¥n ki·ªÉm tra n·∫øu xu·∫•t hi·ªán zombie m·ªõi c√≥ MaxHealth nh·ªè h∆°n
                if currentTarget then
                    local lowerMaxZombie = findLowestMaxHealthZombie(currentTarget.zombie)
                    if lowerMaxZombie then
                        newTarget = lowerMaxZombie
                    end
                end
                if not newTarget then
                    newTarget = findLowestHealthZombie()
                end
                currentTarget = newTarget
                if currentTarget and currentTarget.zombie then
                    local humanoid = currentTarget.zombie:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local targetPosition = currentTarget.part.Position
                        lastZombiePosition = targetPosition
                        camera.CameraSubject = humanoid
                        camera.CameraType = Enum.CameraType.Custom
                        -- T√≠nh v·ªã tr√≠ ph√≠a sau l∆∞ng zombie
                        local cameraBehindDist = 3 -- kho·∫£ng c√°ch ph√≠a sau l∆∞ng zombie (studs)
                        local hrpZombie = currentTarget.zombie:FindFirstChild("HumanoidRootPart")
                        local cameraPos, lookAtPos
                        if hrpZombie then
                            local lookVec = hrpZombie.CFrame.LookVector
                            lookAtPos = hrpZombie.Position
                            -- C·ªông offset
                            cameraPos = hrpZombie.Position - lookVec * cameraBehindDist + Vector3.new(cameraOffsetX, cameraOffsetY, cameraOffsetZ)
                        else
                            -- Kh√¥ng t√¨m th·∫•y HRP, d√πng part v·ªã tr√≠ hi·ªán t·∫°i v√† offset
                            lookAtPos = targetPosition
                            cameraPos = targetPosition + Vector3.new(cameraOffsetX, cameraOffsetY, cameraOffsetZ)
                        end
                        camera.CFrame = CFrame.new(cameraPos, lookAtPos)
                        -- ƒê·ª£i zombie ch·∫øt/thay ƒë·ªïi m·ª•c ti√™u
                        repeat
                            task.wait(0.1)
                            -- N·∫øu zombie ƒë√£ ch·∫øt ho·∫∑c ƒë·ªïi sang target maxHealth th·∫•p h∆°n th√¨ break ngay
                            local lowerMaxZombie = findLowestMaxHealthZombie(currentTarget.zombie)
                            if not humanoid or humanoid.Parent == nil or humanoid.Health <= 0 or lowerMaxZombie then
                                break
                            end
                        until false
                    else
                        break
                    end
                else
                    break
                end
            end
            if hrp then
                hrp.Anchored = false -- B·ªè kh√≥a nh√¢n v·∫≠t
                if teleportToLastZombie and lastZombiePosition then
                    hrp.CFrame = CFrame.new(lastZombiePosition + Vector3.new(0, 3, 0))
                end
            end
            camera.CameraSubject = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
            cameraTeleportActive = false
        end)
	end
end)

----------------------------------------------------------
-- üîπ Fluent UI Controls
local MainTab = Window:AddTab({ Title = "Main", Icon = "" })

MainTab:AddToggle("ESPZombie", {
    Title = "ESP Zombie",
    Default = espZombieEnabled,
    Callback = function(Value)
        espZombieEnabled = Value
        print("ESP Zombie:", Value and "ON" or "OFF")
    end
})

MainTab:AddToggle("Hitbox", {
    Title = "Hitbox",
    Default = hitboxEnabled,
    Callback = function(Value)
        hitboxEnabled = Value
        -- C·∫≠p nh·∫≠t hitbox cho t·∫•t c·∫£ zombie hi·ªán t·∫°i
        for _, zombie in ipairs(entityFolder:GetChildren()) do
            if zombie:IsA("Model") then
                local head = zombie:FindFirstChild("Head")
                if head and head:IsA("BasePart") then
                    if Value then
                        -- B·∫≠t hitbox
                        head.Size = hitboxSize
                        head.Transparency = 0.5
                        head.Color = Color3.fromRGB(255, 0, 0)
                        head.CanCollide = false
                    else
                        -- T·∫Øt hitbox - kh√¥i ph·ª•c size g·ªëc
                        local origX = head:GetAttribute("OriginalSizeX")
                        local origY = head:GetAttribute("OriginalSizeY")
                        local origZ = head:GetAttribute("OriginalSizeZ")
                        if origX and origY and origZ then
                            head.Size = Vector3.new(origX, origY, origZ)
                            head.Transparency = 1
                            head.CanCollide = true
                        end
                    end
                end
            end
        end
        print("Hitbox:", Value and "ON" or "OFF")
    end
})

MainTab:AddToggle("Teleport", {
    Title = "Auto Collect (T Key) - Open Chests & Items",
    Default = teleportEnabled,
    Callback = function(Value)
        teleportEnabled = Value
        print("Auto Collect:", Value and "ON" or "OFF")
    end
})


MainTab:AddToggle("CameraTeleport", {
    Title = "Camera Teleport (X Key)",
    Default = cameraTeleportEnabled,
    Callback = function(Value)
        cameraTeleportEnabled = Value
        print("Camera Teleport:", Value and "ON" or "OFF")
    end
})


MainTab:AddToggle("AutoMove", {
    Title = "Auto Move (M Key) - Maintain Distance",
    Default = autoMoveEnabled,
    Callback = function(Value)
        autoMoveEnabled = Value
        print("Auto Move:", Value and "ON" or "OFF")
    end
})


-- Settings Tab
local SettingsTab = Window:AddTab({ Title = "Settings", Icon = "" })

SettingsTab:AddSlider("HitboxSize", {
    Title = "Hitbox Size",
    Description = "Adjust zombie hitbox size",
    Default = 4,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        hitboxSize = Vector3.new(Value, Value, Value)
        print("Hitbox Size:", Value)
    end
})

SettingsTab:AddSlider("RefreshRate", {
    Title = "Refresh Rate",
    Description = "ESP update rate in seconds",
    Default = 1,
    Min = 0.1,
    Max = 5,
    Rounding = 1,
    Callback = function(Value)
        refreshRate = Value
        print("Refresh Rate:", Value)
    end
})

SettingsTab:AddSlider("AutoMoveDistance", {
    Title = "Auto Move Distance",
    Description = "Distance to maintain from zombie (studs)",
    Default = 100,
    Min = 50,
    Max = 200,
    Rounding = 10,
    Callback = function(Value)
        autoMoveDistance = Value
        print("Auto Move Distance:", Value)
    end
})

SettingsTab:AddSlider("AutoMoveSpeed", {
    Title = "Auto Move Speed",
    Description = "Speed of auto movement (studs/second)",
    Default = 16,
    Min = 5,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        autoMoveSpeed = Value
        print("Auto Move Speed:", Value)
    end
})

SettingsTab:AddToggle("TeleportToLastZombie", {
    Title = "Teleport to Last Zombie",
    Description = "Teleport to last zombie after camera teleport",
    Default = teleportToLastZombie,
    Callback = function(Value)
        teleportToLastZombie = Value
        print("Teleport to Last Zombie:", Value and "ON" or "OFF")
    end
})

SettingsTab:AddSlider("CameraOffsetX", {
    Title = "Camera Offset X",
    Description = "Camera X offset position",
    Default = 0,
    Min = -50,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        cameraOffsetX = Value
        print("Camera Offset X:", Value)
    end
})

SettingsTab:AddSlider("CameraOffsetY", {
    Title = "Camera Offset Y",
    Description = "Camera Y offset position (height)",
    Default = 10,
    Min = -50,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        cameraOffsetY = Value
        print("Camera Offset Y:", Value)
    end
})

SettingsTab:AddSlider("CameraOffsetZ", {
    Title = "Camera Offset Z",
    Description = "Camera Z offset position (distance)",
    Default = -10,
    Min = -50,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        cameraOffsetZ = Value
        print("Camera Offset Z:", Value)
    end
})

Window:SelectTab(1)
print("Zombie Hyperloot: Script loaded successfully!")